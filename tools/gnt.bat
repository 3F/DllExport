@echo off
set gntcore=gnt.core
set tgnt=%temp%/%gntcore%

for %%v in (14.0, 12.0, 15.0, 4.0, 3.5, 2.0) do (
    for /F "usebackq tokens=2* skip=2" %%a in (
        `reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\MSBuild\ToolsVersions\%%v" /v MSBuildToolsPath 2^> nul`
    ) do if exist %%b (
        set msbuild="%%bmsbuild.exe"
        goto found
    )
)

echo MSBuild was not found. Please use it manually like: ` "full_path_to_msbuild.exe" %gntcore% arguments ` 1>&2

goto exit

:found

<nul set /P ="">%tgnt%
<nul set /P =^<!-- GetNuTool - github.com/3F/GetNuTool --^>^<!-- Copyright (c) 2015-2016  Denis Kuzmin (reg) [ entry.reg@gmail.com ] --^>^<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"^>^<PropertyGroup^>^<ngconfig Condition="'$(ngconfig)' == ''"^>.nuget\packages.config^</ngconfig^>^<ngserver Condition="'$(ngserver)' == ''"^>https://www.nuget.org/api/v2/package/^</ngserver^>^<ngpackages Condition="'$(ngpackages)' == ''"^>^</ngpackages^>^<ngpath Condition="'$(ngpath)' == ''"^>packages^</ngpath^>^</PropertyGroup^>^<Target Name="get" BeforeTargets="Build" DependsOnTargets="header"^>^<PrepareList config="$(ngconfig)" plist="$(ngpackages)" wpath="$(wpath)"^>^<Output PropertyName="plist" TaskParameter="Result" /^>^</PrepareList^>^<NGDownload plist="$(plist)" url="$(ngserver)" wpath="$(wpath)" defpath="$(ngpath)" debug="$(debug)" /^>^</Target^>^<Target Name="pack" DependsOnTargets="header"^>^<NGPack dir="$(ngin)" dout="$(ngout)" wpath="$(wpath)" vtool="$(GetNuTool)" debug="$(debug)" /^>^</Target^>^<PropertyGroup^>^<TaskCoreDllPath Condition="Exists('$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll')"^>$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll^</TaskCoreDllPath^>^<TaskCoreDllPath Condition="'$(TaskCoreDllPath)' == '' and Exists('$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll')"^>$(MSBuildToolsPath)\Microsof>> %tgnt%
<nul set /P =t.Build.Tasks.Core.dll^</TaskCoreDllPath^>^</PropertyGroup^>^<UsingTask TaskName="PrepareList" TaskFactory="CodeTaskFactory" AssemblyFile="$(TaskCoreDllPath)"^>^<ParameterGroup^>^<config ParameterType="System.String" Required="true" /^>^<plist ParameterType="System.String" /^>^<wpath ParameterType="System.String" /^>^<Result ParameterType="System.String" Output="true" /^>^</ParameterGroup^>^<Task^>^<Reference Include="System.Xml" /^>^<Reference Include="System.Xml.Linq" /^>^<Using Namespace="System" /^>^<Using Namespace="System.Collections.Generic" /^>^<Using Namespace="System.IO" /^>^<Using Namespace="System.Xml.Linq" /^>^<Code Type="Fragment" Language="cs"^>^<![CDATA[if(!String.IsNullOrEmpty(plist)){Result=plist;return true;}Action^<string,Queue^<string^>^> h=delegate(string cfg,Queue^<string^> list){foreach(var pkg in XDocument.Load(cfg).Descendants("package")){var id=pkg.Attribute("id");var version=pkg.Attribute("version");var output=pkg.Attribute("output");if(id==null){throw new ArgumentException(String.Format("Not found: 'id' in '{0}'",cfg));}var link=id.Value;if(version!=null){link+="/"+version.Value;}if(output!=null){list.Enqueue(link+":"+output.Value);continue;}list.Enqueue(link);}};var ret=new Queue^<string^>();foreach(var cfg in config.Split('^|')){var lcfg=Path.Combine(wpath,cfg??"");if(File.Exists(lcfg)){h(lcfg,ret);}}if(ret.Count ^< 1){throw new FileNotFoundExcept>> %tgnt%
<nul set /P =ion("List of packages is empty. Use .config or /p:ngpackages=\"...\"");}Result=String.Join(";",ret.ToArray());]]^>^</Code^>^</Task^>^</UsingTask^>^<UsingTask TaskName="NGDownload" TaskFactory="CodeTaskFactory" AssemblyFile="$(TaskCoreDllPath)"^>^<ParameterGroup^>^<plist ParameterType="System.String" Required="true" /^>^<url ParameterType="System.String" Required="true" /^>^<wpath ParameterType="System.String" /^>^<defpath ParameterType="System.String" /^>^<debug ParameterType="System.Boolean" /^>^</ParameterGroup^>^<Task^>^<Reference Include="WindowsBase" /^>^<Using Namespace="System" /^>^<Using Namespace="System.IO" /^>^<Using Namespace="System.IO.Packaging" /^>^<Using Namespace="System.Net" /^>^<Code Type="Fragment" Language="cs"^>^<![CDATA[var ignore=new string[]{"/_rels/","/package/","/[Content_Types].xml"};Action^<string,object^> dbg=delegate(string s,object p){if(debug){Console.WriteLine(s,p);}};Func^<string,string^> loc=delegate(string p){return Path.Combine(wpath,p??"");};Action^<string,string,string^> get=delegate(string link,string name,string path){string output=Path.GetFullPath(loc(path??name));if(Directory.Exists(output)){Console.WriteLine("`{0}` is already exists. /pass `{1}`",name,output);return;}Console.Write("Getting `{0}` ... ",link);string temp=Path.Combine(Path.GetTempPath(),name);using(WebClient wc=new WebClient()){wc.DownloadFile(url+link,temp);}Console.Wr>> %tgnt%
<nul set /P =iteLine("Extracting into `{0}`",output);using(Package package=ZipPackage.Open(temp,FileMode.Open,FileAccess.Read)){foreach(PackagePart part in package.GetParts()){var uri=Uri.UnescapeDataString(part.Uri.OriginalString);if(ignore.Any(x=^> uri.StartsWith(x,StringComparison.Ordinal))){continue;}var dest=Path.Combine(output,uri.TrimStart('/'));dbg("- `{0}`",uri);var dir=Path.GetDirectoryName(dest);if(!Directory.Exists(dir)){Directory.CreateDirectory(dir);}using(Stream source=part.GetStream(FileMode.Open,FileAccess.Read))using(FileStream target=File.OpenWrite(dest)){source.CopyTo(target);}}}dbg("Done.{0}",Environment.NewLine);};foreach(var package in plist.Split(';')){var ident=package.Split(':');var link=ident[0];var path=(ident.Length ^> 1)?ident[1]: null;var name=link.Replace('/','.');if(!String.IsNullOrEmpty(defpath)){path=Path.Combine(defpath,path??name);}get(link,name,path);}]]^>^</Code^>^</Task^>^</UsingTask^>^<UsingTask TaskName="NGPack" TaskFactory="CodeTaskFactory" AssemblyFile="$(TaskCoreDllPath)"^>^<ParameterGroup^>^<dir ParameterType="System.String" Required="true" /^>^<dout ParameterType="System.String" /^>^<wpath ParameterType="System.String" /^>^<vtool ParameterType="System.String" Required="true" /^>^<debug ParameterType="System.Boolean" /^>^</ParameterGroup^>^<Task^>^<Reference Include="System.Xml" /^>^<Reference Include="System.Xml.Linq" /^>^<Reference Include="WindowsBase">> %tgnt%
<nul set /P = /^>^<Using Namespace="System" /^>^<Using Namespace="System.Collections.Generic" /^>^<Using Namespace="System.IO" /^>^<Using Namespace="System.Linq" /^>^<Using Namespace="System.IO.Packaging" /^>^<Using Namespace="System.Xml.Linq" /^>^<Using Namespace="System.Text.RegularExpressions" /^>^<Code Type="Fragment" Language="cs"^>^<![CDATA[const string EXT_NUSPEC=".nuspec";const string EXT_NUPKG=".nupkg";const string TAG_META="metadata";const string DEF_CONTENT_TYPE="application/octet";const string MANIFEST_URL="http://schemas.microsoft.com/packaging/2010/07/manifest";const string ID="id";const string VER="version";Action^<string,object^> dbg=delegate(string s,object p){if(debug){Console.WriteLine(s,p);}};dir=Path.Combine(wpath,dir);dout=Path.Combine(wpath,dout??"");var nuspec=Directory.GetFiles(dir,"*"+EXT_NUSPEC,SearchOption.TopDirectoryOnly).FirstOrDefault();if(nuspec==null){throw new FileNotFoundException(String.Format("The {0} file is not found in `{1}`",EXT_NUSPEC,dir));}Console.WriteLine("Found {0}: `{1}`",EXT_NUSPEC,nuspec);var root=XDocument.Load(nuspec).Root.Elements().FirstOrDefault(x=^> x.Name.LocalName==TAG_META);if(root==null){throw new FileNotFoundException(String.Format("The `{0}` not contains {1}.",nuspec,TAG_META));}var metadata=new Dictionary^<string,string^>();foreach(var tag in root.Elements()){metadata[tag.Name.LocalName.ToLower()]=tag.Value;}if(metadata[ID].Len>> %tgnt%
<nul set /P =gth ^> 100 ^|^|!Regex.IsMatch(metadata[ID],@"^^\w+([_.-]\w+)*$",RegexOptions.IgnoreCase ^| RegexOptions.ExplicitCapture)){throw new FormatException(String.Format("The data format of `{0}` is not correct.",ID));}new Version(metadata[VER]);var ignore=new string[]{Path.Combine(dir,"_rels"),Path.Combine(dir,"package"),Path.Combine(dir,"[Content_Types].xml")};string pout=String.Format("{0}.{1}{2}",metadata[ID],metadata[VER],EXT_NUPKG);if(!String.IsNullOrWhiteSpace(dout)){if(!Directory.Exists(dout)){Directory.CreateDirectory(dout);}pout=Path.Combine(dout,pout);}Console.WriteLine("Started packing `{0}` ...",pout);using(Package package=Package.Open(pout,FileMode.Create)){Uri manifestUri=new Uri(String.Format("/{0}{1}",metadata[ID],EXT_NUSPEC),UriKind.Relative);package.CreateRelationship(manifestUri,TargetMode.Internal,MANIFEST_URL);foreach(var file in Directory.GetFiles(dir,"*.*",SearchOption.AllDirectories)){if(ignore.Any(x=^> file.StartsWith(x,StringComparison.Ordinal))){continue;}string pUri;if(file.StartsWith(dir,StringComparison.OrdinalIgnoreCase)){pUri=file.Substring(dir.Length).TrimStart(Path.DirectorySeparatorChar);}else{pUri=file;}dbg("- `{0}`",pUri);var escaped=String.Join("/",pUri.Split('\\','/').Select(p=^> Uri.EscapeDataString(p)));Uri uri=PackUriHelper.CreatePartUri(new Uri(escaped,UriKind.Relative));PackagePart part=package.CreatePart(uri,DEF_CONTENT_TYPE,CompressionOpti>> %tgnt%
<nul set /P =on.Maximum);using(Stream tstream=part.GetStream())using(FileStream fileStream=new FileStream(file,FileMode.Open,FileAccess.Read)){fileStream.CopyTo(tstream);}}Func^<string,string^> getmeta=delegate(string key){return(metadata.ContainsKey(key))?metadata[key]:"";};package.PackageProperties.Creator=getmeta("authors");package.PackageProperties.Description=getmeta("description");package.PackageProperties.Identifier=metadata[ID];package.PackageProperties.Version=metadata[VER];package.PackageProperties.Keywords=getmeta("tags");package.PackageProperties.Title=getmeta("title");package.PackageProperties.LastModifiedBy=String.Format("GetNuTool v{0}",vtool);}]]^>^</Code^>^</Task^>^</UsingTask^>^<Target Name="Build" DependsOnTargets="get" /^>^<PropertyGroup^>^<GetNuTool^>1.5^</GetNuTool^>^<wpath Condition="'$(wpath)' == ''"^>$(MSBuildProjectDirectory)^</wpath^>^</PropertyGroup^>^<Target Name="header"^>^<Message Text="%%0D%%0AGetNuTool - Version: $(GetNuTool)%%0D%%0A=========%%0D%%0A" Importance="high" /^>^</Target^>^</Project^>>> %tgnt%



%msbuild% %tgnt% %* /nologo /verbosity:m /p:wpath="%~dp0/"


:exit