<?xml version="1.0"?>
<package xmlns="http://schemas.microsoft.com/packaging/2011/08/nuspec.xsd">
  <metadata>
    <id>UnmanagedExports</id>
    <version>1.2.6</version>
    <title>Unmanaged Exports (DllExport for .Net)</title>
    <authors>Robert Giesecke</authors>
    <owners>Robert Giesecke</owners>
    <licenseUrl>http://opensource.org/licenses/mit-license.php</licenseUrl>
    <projectUrl>https://sites.google.com/site/robertgiesecke/Home/uploads/unmanagedexports</projectUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <description>A set of compile-time libraries (nothing to deploy) and a build task that enable you to export functions from managed code to native applications.
      That means, you can create plugins in a managed language like C# or F# for native applications that only have a C-Api (like Notepad++).
      The nuget package is all you need. Just mark your methods with [DllExport] and build for x86, x64 or ia64.

      Hints:
      - You have to set your platform target to either x86, ia64 or x64. AnyCPU assemblies cannot export functions.
      - The export name defaults to the method name and the calling convention to stdcall. If that's all what you want, you can just use [DllExport] without parameters.
      - You cannot put your exports in generic types or export generic methods. (The CLR wouldn't know what type parameters to use)</description>
    <summary>Adds the ability to declare unmanaged function exports.
      IOW: the exact opposite of how DllImport works.</summary>
    <releaseNotes>- package restore will now work as expected
      - file extensions otherthan dll are possible now (e.g. .plugin)
      - some fixes regarding the creation of .exp, .def and .lib files
      - changed the nuget scripts to be more resilient
      - added new nuget CmdLets
      - You will now get warnings in the nuget package manager when a project's platform target is not x86 or x64.
      - some refactorings WRT notifications (warnings, etc.)</releaseNotes>
    <language>en-US</language>
    <tags>dllexport unmanaged exports export</tags>
    <references>
      <reference file="RGiesecke.DllExport.Metadata.dll" />
    </references>
  </metadata>
</package>