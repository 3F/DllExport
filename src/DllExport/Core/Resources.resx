<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="No_action_for_parser_state_0_" xml:space="preserve">
    <value>No action for parser state {0}</value>
  </data>
  <data name="Export_name_0_on_1__2_is_Unicode_windows_export_names_have_to_be_basic_latin" xml:space="preserve">
    <value>Export name '{0}' on '{1}'.'{2}' is Unicode, windows export names have to be basic latin and cannot contain quotes.</value>
  </data>
  <data name="calling_0_with_1_" xml:space="preserve">
    <value>calling '{0}' with {1}</value>
  </data>
  <data name="Parsing_action_0_took_1_ms" xml:space="preserve">
    <value>Parsing action '{0}' took {1} ms.</value>
  </data>
  <data name="Duplicate_0_specified_" xml:space="preserve">
    <value>Duplicate {0} specified.</value>
  </data>
  <data name="Provided_key_file_0_cannot_be_found" xml:space="preserve">
    <value>Provided key file '{0}' cannot be found.</value>
  </data>
  <data name="Input_file_required" xml:space="preserve">
    <value>Input file required.</value>
  </data>
  <data name="ExtractExportsContextName" xml:space="preserve">
    <value>ExtractExports</value>
  </data>
  <data name="Parsing_0_lines_of_IL_took_1_ms_" xml:space="preserve">
    <value>Parsing {0} lines of IL took {1} ms.</value>
  </data>
  <data name="The_type_1_cannot_export_the_method_2_as_0_because_it_is_generic_or_is_nested_within_a_generic_type" xml:space="preserve">
    <value>The type '{1}' cannot export the method '{2}' as '{0}' because it is generic or is nested within a generic type.</value>
  </data>
  <data name="AddingVtEntry_0_export_1_" xml:space="preserve">
    <value>exporting as {1} and index {0}</value>
  </data>
  <data name="Directory_0_does_not_exist" xml:space="preserve">
    <value>Directory '{0}' does not exist</value>
  </data>
  <data name="Unknown_cpu_platform_0_" xml:space="preserve">
    <value>Unknown cpu platform '{0}'.</value>
  </data>
  <data name="CreateTempDirectoryContextName" xml:space="preserve">
    <value>CreateTempDirectory</value>
  </data>
  <data name="no_declaration___" xml:space="preserve">
    <value>no declaration...</value>
  </data>
  <data name="ParseILContextName" xml:space="preserve">
    <value>Parse IL</value>
  </data>
  <data name="CopyBeforeContextName" xml:space="preserve">
    <value>Copy 'Before'</value>
  </data>
  <data name="Platform_is_0_creating_binaries_for_each_CPU_platform_in_a_separate_subfolder" xml:space="preserve">
    <value>Platform is {0}, creating binaries for each CPU platform in a separate subfolder...</value>
  </data>
  <data name="CopyAfterContextName" xml:space="preserve">
    <value>Copy 'After'</value>
  </data>
  <data name="FindDuplicateExportMethodsContextName" xml:space="preserve">
    <value>FindDuplicateExportMethods</value>
  </data>
  <data name="OldDeclaration_0_" xml:space="preserve">
    <value>old declaration: {0}</value>
  </data>
  <data name="AssemblyAlias" xml:space="preserve">
    <value> (alias {0})</value>
  </data>
  <data name="R_0_did_not_return_after_1_ms" xml:space="preserve">
    <value>{0} did not return after {1} ms.</value>
  </data>
  <data name="Current_Notifier_Context_is___0____it_should_have_been___1___" xml:space="preserve">
    <value>Current Notifier Context is '{0}', it should have been '{1}'.</value>
  </data>
  <data name="Input_file_must_be_a_DLL" xml:space="preserve">
    <value>Input file must be a DLL.</value>
  </data>
  <data name="no_name___" xml:space="preserve">
    <value>no name...</value>
  </data>
  <data name="Found_method_0_1_" xml:space="preserve">
    <value>Found method: {0}.{1}</value>
  </data>
  <data name="Deleting_reference_to_0_" xml:space="preserve">
    <value>Deleting unused reference to {0}{1}.</value>
  </data>
  <data name="R_0_did_not_return_after_1_ms_and_it_could_not_be_stopped" xml:space="preserve">
    <value>{0} did not return after {1} ms and it could not be stopped.
{2}</value>
  </data>
  <data name="Removing_0_from_1_" xml:space="preserve">
    <value>Removing {0} from {1}</value>
  </data>
  <data name="The_method_1_2_is_generic_export_name_0_Generic_methods_cannot_be_exported_" xml:space="preserve">
    <value>The method '{1}'.'{2}' (export name '{0}') is generic. Generic methods cannot be exported.</value>
  </data>
  <data name="R_0_1_returned_gracefully" xml:space="preserve">
    <value>{0} '{1}' returned gracefully.</value>
  </data>
  <data name="No_paramaters_provided__at_least_the_input_assembly_name_is_needed" xml:space="preserve">
    <value>No paramaters provided, at least the input assembly name is needed.</value>
  </data>
  <data name="An_error_occurred_while_calling_0_1_" xml:space="preserve">
    <value>An error occurred while calling {0}: {1}</value>
  </data>
  <data name="NewDeclaration_0_" xml:space="preserve">
    <value>new declaration: {0}</value>
  </data>
  <data name="Input_assembly_does_not_exist" xml:space="preserve">
    <value>Input assembly does not exist.</value>
  </data>
  <data name="Ambiguous_export_name_0_on_1_2_" xml:space="preserve">
    <value>Ambiguous export name '{0}' on '{1}'.'{2}'.</value>
  </data>
  <data name="The_method_1_2_is_not_static_export_name_0_" xml:space="preserve">
    <value>The method '{1}'.'{2}' (export name '{0}') is not static. Only static methods can be exported.</value>
  </data>
  <data name="The_destination_directory_already_exists_" xml:space="preserve">
    <value>The destination directory already exists.</value>
  </data>
</root>