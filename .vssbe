{
  "Header": {
    "_": [
      " This requires vsSolutionBuildEvent engine.",
      " Free plugin for Visual Studio or MSBuild Tools:",
      "  * https://github.com/3F/vsSolutionBuildEvent",
      "  * https://visualstudiogallery.msdn.microsoft.com/0d1dbfd7-ed8a-40af-ae39-281bfeca2334/",
      " Feedback: github.com/3F  or entry.reg@gmail.com"
    ],
    "Compatibility": "0.9"
  },
  "Components": [
    {
      "ClassName": "InternalComponent",
      "Enabled": true
    },
    {
      "ClassName": "UserVariableComponent",
      "Enabled": true
    },
    {
      "ClassName": "TryComponent",
      "Enabled": true
    },
    {
      "ClassName": "OWPComponent",
      "Enabled": true
    },
    {
      "ClassName": "NuGetComponent",
      "Enabled": true
    },
    {
      "ClassName": "FunctionComponent",
      "Enabled": true
    },
    {
      "ClassName": "FileComponent",
      "Enabled": true
    },
    {
      "ClassName": "DTEComponent",
      "Enabled": true
    },
    {
      "ClassName": "BuildComponent",
      "Enabled": true
    },
    {
      "ClassName": "BoxComponent",
      "Enabled": true
    },
    {
      "ClassName": "SevenZipComponent",
      "Enabled": true
    },
    {
      "ClassName": "ConditionComponent",
      "Enabled": true
    },
    {
      "ClassName": "MSBuildComponent",
      "Enabled": true
    },
    {
      "ClassName": "CommentComponent",
      "Enabled": true
    }
  ],
  "PreBuild": [
    {
      "Enabled": true,
      "Name": "ActDir",
      "Caption": "Prepare output directory",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": false,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[$(dbin = \"bin/$(Configuration)/\")]\n\n$(pDllExport    = \"RGiesecke.DllExport\")\n$(pMeta         = \"Metadata\")\n$(pNSBin        = \"NSBin\")\n$(pConf         = \"Configurator\")\n$(pMSBuild      = \"RGiesecke.DllExport.MSBuild\")\n$(odir          = \"$(dbin)raw/\")\n\n$(revDeltaBase = \"2016/10/12\")\n\n#[IO delete.directory(\"$(dbin)\", true)]\n#[IO copy.directory(\"\", \"$(dbin)\", true)]",
        "Command__": [
          "#[$(dbin = \"bin/$(Configuration)/\")]",
          "",
          "$(pDllExport    = \"RGiesecke.DllExport\")",
          "$(pMeta         = \"Metadata\")",
          "$(pNSBin        = \"NSBin\")",
          "$(pConf         = \"Configurator\")",
          "$(pMSBuild      = \"RGiesecke.DllExport.MSBuild\")",
          "$(odir          = \"$(dbin)raw/\")",
          "",
          "$(revDeltaBase = \"2016/10/12\")",
          "",
          "#[IO delete.directory(\"$(dbin)\", true)]",
          "#[IO copy.directory(\"\", \"$(dbin)\", true)]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActUpdVersions",
      "Caption": "Update version number",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": false,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[var pVer = #[File get(\".version\")]]\n\n#[\" TODO: how about tpl ?  \"]\n\n#[IO replace.Regex(\"$(pDllExport)/DllExportVersion.cs\", \"Version =.+?\\\";\", \"Version = \\\"$(pVer)\\\";\")]\n#[IO replace.Regex(\"$(pMSBuild)/DllExportVersion.cs\", \"Version =.+?\\\";\", \"Version = \\\"$(pVer)\\\";\")]\n#[IO replace.Regex(\"$(pMeta)/AssemblyInfo.cs\", \"AssemblyVersion\\(.+?\\)\", \"AssemblyVersion(\\\"$(pVer).*\\\")\")]\n\n#[IO replace.Regex(\"tools/DllExport.nuspec\", \"<version>.+?</version>\", \"<version>$(pVer)</version>\")]\n#[IO replace.Regex(\"tools/DllExport.nuspec\", \"\\\"DllExport/[0-9.]+\\\"\", \"\\\"DllExport/$(pVer)\\\"\")]",
        "Command__": [
          "#[var pVer = #[File get(\".version\")]]",
          "",
          "#[\" TODO: how about tpl ?  \"]",
          "",
          "#[IO replace.Regex(\"$(pDllExport)/DllExportVersion.cs\", \"Version =.+?\\\";\", \"Version = \\\"$(pVer)\\\";\")]",
          "#[IO replace.Regex(\"$(pMSBuild)/DllExportVersion.cs\", \"Version =.+?\\\";\", \"Version = \\\"$(pVer)\\\";\")]",
          "#[IO replace.Regex(\"$(pMeta)/AssemblyInfo.cs\", \"AssemblyVersion\\(.+?\\)\", \"AssemblyVersion(\\\"$(pVer).*\\\")\")]",
          "",
          "#[IO replace.Regex(\"tools/DllExport.nuspec\", \"<version>.+?</version>\", \"<version>$(pVer)</version>\")]",
          "#[IO replace.Regex(\"tools/DllExport.nuspec\", \"\\\"DllExport/[0-9.]+\\\"\", \"\\\"DllExport/$(pVer)\\\"\")]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActConfVersion",
      "Caption": "Update ConfVersion",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": false,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[var tpl = // This code was generated by a vsSolutionBuildEvent. \n// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.\nnamespace net.r_eg.DllExport.Configurator\n{\n    using System;\n\n    internal struct ConfVersion\n    {\n        public static readonly Version number = new Version(S_NUM_REV);\n\n        public const string S_NUM = \"%S_NUM%\";\n        public const string S_REV = \"%S_REV%\";\n\n        public const string S_NUM_REV   = S_NUM + \".\" + S_REV;\n        public const string BRANCH_SHA1 = \"%B_SHA1%\";\n\n        internal const string S_INFO = S_NUM_REV + \" [ \" + BRANCH_SHA1 + \" ]\";\n    }\n}]\n\n#[\" \n    Calculate revision\n\"]\n#[var tStart    = $([System.DateTime]::Parse(\"$(revDeltaBase)\").ToBinary())]\n#[var tNow      = $([System.DateTime]::UtcNow.Ticks)]\n#[var revBuild  = $([System.TimeSpan]::FromTicks($([MSBuild]::Subtract($(tNow), $(tStart)))).TotalMinutes.ToString(\"0\"))]\n#[var revBuild  = $([MSBuild]::Modulo(#[var revBuild], 999999))]\n\n#[\" \n    Remove placeholders\n\"]\n#[var tpl = $(tpl.Replace(\"%S_NUM%\", \"$(pVer)\").Replace(\"%S_REV%\", \"$(revBuild)\"))]\n\n#[\" \n    Checking of the git folder +tool & define sha1, branch name, etc.\n\"]\n#[( #[IO exists.directory(\".git\")] && #[IO exists.file(\"git.exe\", true)] )\n{\n    #[var bSha1 = #[IO sout(\"git\", \"rev-parse --short HEAD\")]]\n    \n    #[var tpl = $(tpl.Replace(\"%B_SHA1%\", \"#[var bSha1]\"))]\n}\nelse {\n    #[var tpl = $(tpl.Replace(\"%B_SHA1%\", \"-\"))]\n}]\n\n#[\" \n    Save result\n\"]\n#[File write(\"$(pConf)/ConfVersion.cs\"):#[var tpl]]",
        "Command__": [
          "#[var tpl = // This code was generated by a vsSolutionBuildEvent. ",
          "// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.",
          "namespace net.r_eg.DllExport.Configurator",
          "{",
          "    using System;",
          "",
          "    internal struct ConfVersion",
          "    {",
          "        public static readonly Version number = new Version(S_NUM_REV);",
          "",
          "        public const string S_NUM = \"%S_NUM%\";",
          "        public const string S_REV = \"%S_REV%\";",
          "",
          "        public const string S_NUM_REV   = S_NUM + \".\" + S_REV;",
          "        public const string BRANCH_SHA1 = \"%B_SHA1%\";",
          "",
          "        internal const string S_INFO = S_NUM_REV + \" [ \" + BRANCH_SHA1 + \" ]\";",
          "    }",
          "}]",
          "",
          "#[\" ",
          "    Calculate revision",
          "\"]",
          "#[var tStart    = $([System.DateTime]::Parse(\"$(revDeltaBase)\").ToBinary())]",
          "#[var tNow      = $([System.DateTime]::UtcNow.Ticks)]",
          "#[var revBuild  = $([System.TimeSpan]::FromTicks($([MSBuild]::Subtract($(tNow), $(tStart)))).TotalMinutes.ToString(\"0\"))]",
          "#[var revBuild  = $([MSBuild]::Modulo(#[var revBuild], 999999))]",
          "",
          "#[\" ",
          "    Remove placeholders",
          "\"]",
          "#[var tpl = $(tpl.Replace(\"%S_NUM%\", \"$(pVer)\").Replace(\"%S_REV%\", \"$(revBuild)\"))]",
          "",
          "#[\" ",
          "    Checking of the git folder +tool & define sha1, branch name, etc.",
          "\"]",
          "#[( #[IO exists.directory(\".git\")] && #[IO exists.file(\"git.exe\", true)] )",
          "{",
          "    #[var bSha1 = #[IO sout(\"git\", \"rev-parse --short HEAD\")]]",
          "    ",
          "    #[var tpl = $(tpl.Replace(\"%B_SHA1%\", \"#[var bSha1]\"))]",
          "}",
          "else {",
          "    #[var tpl = $(tpl.Replace(\"%B_SHA1%\", \"-\"))]",
          "}]",
          "",
          "#[\" ",
          "    Save result",
          "\"]",
          "#[File write(\"$(pConf)/ConfVersion.cs\"):#[var tpl]]"
        ]
      }
    }
  ],
  "PostBuild": [
    {
      "Enabled": true,
      "Name": "ActBinaries",
      "Caption": "Binaries & tools ...",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": true,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[IO copy.file(\n            \"$(SolutionDir)tools/*.*\", \n            \"$(odir)/tools/\", \n            true, \n            {\"*.nuspec\"})]\n\n#[IO copy.file(\"tools/DllExport.nuspec\", \"$(odir)/DllExport.nuspec\", true)]\n\n#[IO copy.file({\n                \"$(pDllExport)/$(OutDir:$(pDllExport))/*.*\",\n                \"$(pMSBuild)/$(OutDir:$(pMSBuild))/*.*\",\n                \"$(pNSBin)/$(OutDir:$(pNSBin))/*.*\",\n                \"$(pConf)/$(OutDir:$(pConf))/*.*\"\n               }, \n               \"$(odir)/tools/\", true)]\n\n            \n#[IO copy.file(\"$(pMeta)/$(OutDir:$(pMeta))/*.dll\", \n               \"$(odir)/lib/net20/\", true)]\n\n#[IO copy.file({ \"LICENSE\", \"Readme.md\", \"3rd-party.txt\" }, \"$(odir)/\", true)]",
        "Command__": [
          "#[IO copy.file(",
          "            \"$(SolutionDir)tools/*.*\", ",
          "            \"$(odir)/tools/\", ",
          "            true, ",
          "            {\"*.nuspec\"})]",
          "",
          "#[IO copy.file(\"tools/DllExport.nuspec\", \"$(odir)/DllExport.nuspec\", true)]",
          "",
          "#[IO copy.file({",
          "                \"$(pDllExport)/$(OutDir:$(pDllExport))/*.*\",",
          "                \"$(pMSBuild)/$(OutDir:$(pMSBuild))/*.*\",",
          "                \"$(pNSBin)/$(OutDir:$(pNSBin))/*.*\",",
          "                \"$(pConf)/$(OutDir:$(pConf))/*.*\"",
          "               }, ",
          "               \"$(odir)/tools/\", true)]",
          "",
          "            ",
          "#[IO copy.file(\"$(pMeta)/$(OutDir:$(pMeta))/*.dll\", ",
          "               \"$(odir)/lib/net20/\", true)]",
          "",
          "#[IO copy.file({ \"LICENSE\", \"Readme.md\", \"3rd-party.txt\" }, \"$(odir)/\", true)]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActILAsm",
      "Caption": "Provide our ILAsm & ILDasm",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": true,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[( #[File exists.directory(\"packages/ILAsm/bin\")] )\n{ \n    #[File scall(\"packages_restore.cmd\", \"\", 400)]\n}\nelse{\n    #[File call(\"packages_restore.cmd\", \"\", 2000)]\n}]\n\n#[IO copy.file({\n                \"packages/ILAsm/bin/Win.x86/*.dll\",\n                \"packages/ILAsm/bin/Win.x86/*.exe\",\n                \"packages/ILAsm/*.txt\",\n                \"packages/ILAsm/*.md\"\n               }, \n               \"$(odir)/tools/coreclr/\", true)]",
        "Command__": [
          "#[( #[File exists.directory(\"packages/ILAsm/bin\")] )",
          "{ ",
          "    #[File scall(\"packages_restore.cmd\", \"\", 400)]",
          "}",
          "else{",
          "    #[File call(\"packages_restore.cmd\", \"\", 2000)]",
          "}]",
          "",
          "#[IO copy.file({",
          "                \"packages/ILAsm/bin/Win.x86/*.dll\",",
          "                \"packages/ILAsm/bin/Win.x86/*.exe\",",
          "                \"packages/ILAsm/*.txt\",",
          "                \"packages/ILAsm/*.md\"",
          "               }, ",
          "               \"$(odir)/tools/coreclr/\", true)]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActPack",
      "Caption": "Packing with GetNuTool ...",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": true,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[NuGet gnt.raw(\"/t:pack /p:ngin=\\\"$(odir)\\\" /p:ngout=\\\"$(dbin)\\\"\")]",
        "Command__": [
          "#[NuGet gnt.raw(\"/t:pack /p:ngin=\\\"$(odir)\\\" /p:ngout=\\\"$(dbin)\\\"\")]"
        ]
      }
    }
  ],
  "CancelBuild": [],
  "WarningsBuild": [],
  "ErrorsBuild": [],
  "OWPBuild": [],
  "Transmitter": [],
  "CommandEvent": [],
  "Logging": [],
  "SlnOpened": [
    {
      "Enabled": true,
      "Name": "ActDefConst",
      "Caption": "define dynamic constants",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": false,
      "BuildType": "BeforeAndAfter",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "$(defConstList = \"CONFVER_EXISTS\")\n$(+DefConstDynamic = $(defConstList):Configurator)",
        "Command__": [
          "$(defConstList = \"CONFVER_EXISTS\")",
          "$(+DefConstDynamic = $(defConstList):Configurator)"
        ]
      }
    }
  ],
  "SlnClosed": []
}