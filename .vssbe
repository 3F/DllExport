{
  "Header": {
    "_": [
      " This requires vsSolutionBuildEvent engine.",
      " Free plugin for Visual Studio or MSBuild Tools:",
      "  * https://github.com/3F/vsSolutionBuildEvent",
      "  * https://visualstudiogallery.msdn.microsoft.com/0d1dbfd7-ed8a-40af-ae39-281bfeca2334/",
      " Feedback: github.com/3F  or entry.reg@gmail.com"
    ],
    "Compatibility": "0.9"
  },
  "Components": [
    {
      "ClassName": "InternalComponent",
      "Enabled": true
    },
    {
      "ClassName": "UserVariableComponent",
      "Enabled": true
    },
    {
      "ClassName": "TryComponent",
      "Enabled": true
    },
    {
      "ClassName": "OWPComponent",
      "Enabled": true
    },
    {
      "ClassName": "NuGetComponent",
      "Enabled": true
    },
    {
      "ClassName": "FunctionComponent",
      "Enabled": true
    },
    {
      "ClassName": "FileComponent",
      "Enabled": true
    },
    {
      "ClassName": "DTEComponent",
      "Enabled": true
    },
    {
      "ClassName": "BuildComponent",
      "Enabled": true
    },
    {
      "ClassName": "BoxComponent",
      "Enabled": true
    },
    {
      "ClassName": "SevenZipComponent",
      "Enabled": true
    },
    {
      "ClassName": "ConditionComponent",
      "Enabled": true
    },
    {
      "ClassName": "MSBuildComponent",
      "Enabled": true
    },
    {
      "ClassName": "CommentComponent",
      "Enabled": true
    }
  ],
  "PreBuild": [
    {
      "Enabled": true,
      "Name": "ActDir",
      "Caption": "Prepare output directory",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": false,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[($(Configuration) == \"PublicRelease\") {\n    #[$(cfgname = 'Release')]\n}\nelse{\n    #[$(cfgname = $(Configuration))]\n}]\n\n#[$(dbin = \"bin/$(cfgname)/\")]\n\n$(revDeltaBase  = \"2016/10/12\")\n$(revDeltaMin   = $([System.Math]::Pow(10, 3)))\n$$(revDeltaMax   = $([System.Math]::Pow(10, 5)))\n$(revDeltaMax   = 65534) #[\" limit of AssemblyVersion (2^16 - 2) - i.e. 65534 max allowed \"]\n\n$(pDllExport    = \"RGiesecke.DllExport\")\n$(pMeta         = \"Metadata\")\n$(pNSBin        = \"NSBin\")\n$(pConf         = \"Configurator\")\n$(pWizard       = \"Wizard\")\n$(pGetNuTool    = \"GetNuTool\")\n$(pMSBuild      = \"RGiesecke.DllExport.MSBuild\")\n$(odir          = \"$(dbin)raw/\")\n\n#[IO delete.directory(\"$(dbin)\", true)]\n#[IO copy.directory(\"\", \"$(dbin)\", true)]",
        "Command__": [
          "#[($(Configuration) == \"PublicRelease\") {",
          "    #[$(cfgname = 'Release')]",
          "}",
          "else{",
          "    #[$(cfgname = $(Configuration))]",
          "}]",
          "",
          "#[$(dbin = \"bin/$(cfgname)/\")]",
          "",
          "$(revDeltaBase  = \"2016/10/12\")",
          "$(revDeltaMin   = $([System.Math]::Pow(10, 3)))",
          "$$(revDeltaMax   = $([System.Math]::Pow(10, 5)))",
          "$(revDeltaMax   = 65534) #[\" limit of AssemblyVersion (2^16 - 2) - i.e. 65534 max allowed \"]",
          "",
          "$(pDllExport    = \"RGiesecke.DllExport\")",
          "$(pMeta         = \"Metadata\")",
          "$(pNSBin        = \"NSBin\")",
          "$(pConf         = \"Configurator\")",
          "$(pWizard       = \"Wizard\")",
          "$(pGetNuTool    = \"GetNuTool\")",
          "$(pMSBuild      = \"RGiesecke.DllExport.MSBuild\")",
          "$(odir          = \"$(dbin)raw/\")",
          "",
          "#[IO delete.directory(\"$(dbin)\", true)]",
          "#[IO copy.directory(\"\", \"$(dbin)\", true)]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActSubmodules",
      "Caption": "git submodules",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": false,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[$(moduleGetNuTool = \"GetNuTool/gnt.sln\")]\n\n#[( #[IO exists.file(\"$(moduleGetNuTool)\")] )\n{ \n    #[File scall(\"submodules.bat\", \"$(moduleGetNuTool)\", 400)]\n}\nelse{\n    #[File call(\"submodules.bat\", \"$(moduleGetNuTool)\", 2000)]\n}]",
        "Command__": [
          "#[$(moduleGetNuTool = \"GetNuTool/gnt.sln\")]",
          "",
          "#[( #[IO exists.file(\"$(moduleGetNuTool)\")] )",
          "{ ",
          "    #[File scall(\"submodules.bat\", \"$(moduleGetNuTool)\", 400)]",
          "}",
          "else{",
          "    #[File call(\"submodules.bat\", \"$(moduleGetNuTool)\", 2000)]",
          "}]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActUpdVersions",
      "Caption": "Update version number",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": false,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[var pVer = #[File get(\".version\")]]\n#[$(dxpPrintVersion = \"v$(pVer)\")]\n\n#[\" TODO: how about tpl ?  \"]\n\n#[IO replace.Regex(\"$(pDllExport)/DllExportVersion.cs\", \"Version =.+?\\\";\", \"Version = \\\"$(pVer)\\\";\")]\n#[IO replace.Regex(\"$(pMSBuild)/DllExportVersion.cs\", \"Version =.+?\\\";\", \"Version = \\\"$(pVer)\\\";\")]\n#[IO replace.Regex(\"$(pMeta)/AssemblyInfo.cs\", \"AssemblyVersion\\(.+?\\)\", \"AssemblyVersion(\\\"$(pVer).*\\\")\")]\n\n#[var pReleaseVersion   = #[File get(\".release.version\")]]\n#[$(pReleaseVersion     = $(pReleaseVersion.Trim()))]\n\n#[( $(pReleaseVersion) == \"\" ) {\n    #[$(pVerRel = \"$(pVer)\")]\n} else {\n    #[$(pVerRel = \"$(pVer)-$(pReleaseVersion)\")]\n}]\n\n#[IO replace.Regex(\"tools/DllExport.nuspec\", \"<version>.+?</version>\", \"<version>$(pVerRel)</version>\")]\n#[IO replace.Regex(\"tools/DllExport.nuspec\", \"\\\"DllExport/.+?\\\"\", \"\\\"DllExport/$(pVerRel)\\\"\")]\n\n#[( $(Configuration) != \"PublicRelease\" )\n{\n    #[IO replace.Regex(\"$(pConf)/ConfVersion.cs\", \"(\\sS_NUM\\s=).+?\\\";\", \"$1 \\\"$(pVer)\\\";\")]\n    #[IO replace.Regex(\"$(pWizard)/WizardVersion.cs\", \"(\\sS_NUM\\s=).+?\\\";\", \"$1 \\\"$(pVer)\\\";\")]\n    \n    #[IO replace.Regex(\"$(pConf)/ConfVersion.cs\", \"(\\sS_REL\\s=).+?\\\";\", \"$1 \\\"$(pReleaseVersion)\\\";\")]\n    #[IO replace.Regex(\"$(pWizard)/WizardVersion.cs\", \"(\\sS_REL\\s=).+?\\\";\", \"$1 \\\"$(pReleaseVersion)\\\";\")]\n}]",
        "Command__": [
          "#[var pVer = #[File get(\".version\")]]",
          "#[$(dxpPrintVersion = \"v$(pVer)\")]",
          "",
          "#[\" TODO: how about tpl ?  \"]",
          "",
          "#[IO replace.Regex(\"$(pDllExport)/DllExportVersion.cs\", \"Version =.+?\\\";\", \"Version = \\\"$(pVer)\\\";\")]",
          "#[IO replace.Regex(\"$(pMSBuild)/DllExportVersion.cs\", \"Version =.+?\\\";\", \"Version = \\\"$(pVer)\\\";\")]",
          "#[IO replace.Regex(\"$(pMeta)/AssemblyInfo.cs\", \"AssemblyVersion\\(.+?\\)\", \"AssemblyVersion(\\\"$(pVer).*\\\")\")]",
          "",
          "#[var pReleaseVersion   = #[File get(\".release.version\")]]",
          "#[$(pReleaseVersion     = $(pReleaseVersion.Trim()))]",
          "",
          "#[( $(pReleaseVersion) == \"\" ) {",
          "    #[$(pVerRel = \"$(pVer)\")]",
          "} else {",
          "    #[$(pVerRel = \"$(pVer)-$(pReleaseVersion)\")]",
          "}]",
          "",
          "#[IO replace.Regex(\"tools/DllExport.nuspec\", \"<version>.+?</version>\", \"<version>$(pVerRel)</version>\")]",
          "#[IO replace.Regex(\"tools/DllExport.nuspec\", \"\\\"DllExport/.+?\\\"\", \"\\\"DllExport/$(pVerRel)\\\"\")]",
          "",
          "#[( $(Configuration) != \"PublicRelease\" )",
          "{",
          "    #[IO replace.Regex(\"$(pConf)/ConfVersion.cs\", \"(\\sS_NUM\\s=).+?\\\";\", \"$1 \\\"$(pVer)\\\";\")]",
          "    #[IO replace.Regex(\"$(pWizard)/WizardVersion.cs\", \"(\\sS_NUM\\s=).+?\\\";\", \"$1 \\\"$(pVer)\\\";\")]",
          "    ",
          "    #[IO replace.Regex(\"$(pConf)/ConfVersion.cs\", \"(\\sS_REL\\s=).+?\\\";\", \"$1 \\\"$(pReleaseVersion)\\\";\")]",
          "    #[IO replace.Regex(\"$(pWizard)/WizardVersion.cs\", \"(\\sS_REL\\s=).+?\\\";\", \"$1 \\\"$(pReleaseVersion)\\\";\")]",
          "}]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActConfVersion",
      "Caption": "Update ConfVersion",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": false,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [
        "PublicRelease|Any CPU"
      ],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[var tpl = // This code was generated by a vsSolutionBuildEvent. \n// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.\nnamespace net.r_eg.DllExport.Configurator\n{\n    using System;\n\n    internal struct ConfVersion\n    {\n        public static readonly Version number = new Version(S_NUM_REV);\n\n        public const string S_NUM = \"%S_NUM%\";\n        public const string S_REV = \"%S_REV%\";\n        public const string S_REL = \"%S_REL%\";\n\n        public const string S_NUM_REV = S_NUM + \".\" + S_REV;\n\n        public const string BRANCH_SHA1 = \"%B_SHA1%\";\n        public const string BRANCH_NAME = \"%B_NAME%\";\n        public const string BRANCH_REVC = \"%B_REVC%\";\n\n        internal const string S_INFO        = S_NUM_REV + \" \" + S_REL + \" [ \" + BRANCH_SHA1 + \" ]\";\n        internal const string S_INFO_FULL   = S_INFO + \" /'\" + BRANCH_NAME + \"':\" + BRANCH_REVC;\n    }\n}]\n\n\n#[\" \n    Calculate revision\n\"]\n#[var tBase     = $([System.DateTime]::Parse('$(revDeltaBase)').ToBinary())]\n#[var tNow      = $([System.DateTime]::UtcNow.Ticks)]\n#[var revBuild  = #[$(\n                    [System.TimeSpan]::FromTicks('$(\n                        [MSBuild]::Subtract($(tNow), $(tBase))\n                    )')\n                    .TotalMinutes.ToString('0'))]]\n                     \n#[var revBuild  = #[$(\n                    [MSBuild]::Add(\n                        $(revDeltaMin), \n                        $([MSBuild]::Modulo(\n                            $(revBuild), \n                            $([MSBuild]::Subtract(\n                                $(revDeltaMax), $(revDeltaMin)\n                             ))\n                         ))\n                     )\n                   )]\n]\n\n#[$(dxpPrintVersion = \"v$(pVer).$(revBuild)\")]\n\n#[\" \n    Remove placeholders\n\"]\n#[var tpl = $(tpl.Replace(\"%S_NUM%\", \"$(pVer)\").Replace(\"%S_REV%\", \"$(revBuild)\").Replace(\"%S_REL%\", \"$(pReleaseVersion)\"))]\n\n#[\" \n    Checking of the git folder +tool & define sha1, branch name, etc.\n\"]\n#[var isGit = #[IO cmd(\"git rev-parse 2>&1\")]]\n#[( $(isGit) == \"\" )\n{\n    #[var bSha1 = #[IO sout(\"git\", \"rev-parse --short HEAD\")]]\n    #[var bName = #[IO sout(\"git\", \"rev-parse --abbrev-ref HEAD\")]]\n    #[var bRevc = #[IO sout(\"git\", \"rev-list HEAD --count\")]]\n    \n    #[($(bName) == \"HEAD\") {\n        #[var bName = $(APPVEYOR_REPO_BRANCH)]\n    }]\n    \n    #[$(dxpPrintVersion = \"$(dxpPrintVersion) [ $(bSha1) ]\")]\n}\nelse {\n    #[$(bSha1 = '-')] #[$(bName = '-')] #[$(bRevc = '-')]\n}]\n\n#[var tpl = #[$(tpl.Replace(\"%B_SHA1%\", \"#[var bSha1]\")\n                   .Replace(\"%B_NAME%\", \"#[var bName]\")\n                   .Replace(\"%B_REVC%\", \"#[var bRevc]\") )]]\n\n#[\" \n    Save result\n\"]\n#[File write(\"$(pConf)/ConfVersion.cs\"):#[var tpl]]",
        "Command__": [
          "#[var tpl = // This code was generated by a vsSolutionBuildEvent. ",
          "// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.",
          "namespace net.r_eg.DllExport.Configurator",
          "{",
          "    using System;",
          "",
          "    internal struct ConfVersion",
          "    {",
          "        public static readonly Version number = new Version(S_NUM_REV);",
          "",
          "        public const string S_NUM = \"%S_NUM%\";",
          "        public const string S_REV = \"%S_REV%\";",
          "        public const string S_REL = \"%S_REL%\";",
          "",
          "        public const string S_NUM_REV = S_NUM + \".\" + S_REV;",
          "",
          "        public const string BRANCH_SHA1 = \"%B_SHA1%\";",
          "        public const string BRANCH_NAME = \"%B_NAME%\";",
          "        public const string BRANCH_REVC = \"%B_REVC%\";",
          "",
          "        internal const string S_INFO        = S_NUM_REV + \" \" + S_REL + \" [ \" + BRANCH_SHA1 + \" ]\";",
          "        internal const string S_INFO_FULL   = S_INFO + \" /'\" + BRANCH_NAME + \"':\" + BRANCH_REVC;",
          "    }",
          "}]",
          "",
          "",
          "#[\" ",
          "    Calculate revision",
          "\"]",
          "#[var tBase     = $([System.DateTime]::Parse('$(revDeltaBase)').ToBinary())]",
          "#[var tNow      = $([System.DateTime]::UtcNow.Ticks)]",
          "#[var revBuild  = #[$(",
          "                    [System.TimeSpan]::FromTicks('$(",
          "                        [MSBuild]::Subtract($(tNow), $(tBase))",
          "                    )')",
          "                    .TotalMinutes.ToString('0'))]]",
          "                     ",
          "#[var revBuild  = #[$(",
          "                    [MSBuild]::Add(",
          "                        $(revDeltaMin), ",
          "                        $([MSBuild]::Modulo(",
          "                            $(revBuild), ",
          "                            $([MSBuild]::Subtract(",
          "                                $(revDeltaMax), $(revDeltaMin)",
          "                             ))",
          "                         ))",
          "                     )",
          "                   )]",
          "]",
          "",
          "#[$(dxpPrintVersion = \"v$(pVer).$(revBuild)\")]",
          "",
          "#[\" ",
          "    Remove placeholders",
          "\"]",
          "#[var tpl = $(tpl.Replace(\"%S_NUM%\", \"$(pVer)\").Replace(\"%S_REV%\", \"$(revBuild)\").Replace(\"%S_REL%\", \"$(pReleaseVersion)\"))]",
          "",
          "#[\" ",
          "    Checking of the git to define sha1, branch name, etc.",
          "\"]",
          "#[var isGit = #[IO cmd(\"git rev-parse 2>&1\")]]",
          "#[( $(isGit) == \"\" )",
          "{",
          "    #[var bSha1 = #[IO sout(\"git\", \"rev-parse --short HEAD\")]]",
          "    #[var bName = #[IO sout(\"git\", \"rev-parse --abbrev-ref HEAD\")]]",
          "    #[var bRevc = #[IO sout(\"git\", \"rev-list HEAD --count\")]]",
          "    ",
          "    #[($(bName) == \"HEAD\") {",
          "        #[var bName = $(APPVEYOR_REPO_BRANCH)]",
          "    }]",
          "    ",
          "    #[$(dxpPrintVersion = \"$(dxpPrintVersion) [ $(bSha1) ]\")]",
          "}",
          "else {",
          "    #[$(bSha1 = '-')] #[$(bName = '-')] #[$(bRevc = '-')]",
          "}]",
          "",
          "#[var tpl = #[$(tpl.Replace(\"%B_SHA1%\", \"#[var bSha1]\")",
          "                   .Replace(\"%B_NAME%\", \"#[var bName]\")",
          "                   .Replace(\"%B_REVC%\", \"#[var bRevc]\") )]]",
          "",
          "#[\" ",
          "    Save result",
          "\"]",
          "#[File write(\"$(pConf)/ConfVersion.cs\"):#[var tpl]]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActWizardVersion",
      "Caption": "Update WizardVersion",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": false,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [
        "PublicRelease|Any CPU"
      ],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[\" \n    WizardVersion & ConfVersion are the same for current time\n\"]\n#[File write(\"$(pWizard)/WizardVersion.cs\"):#[$(tpl.Replace(\"ConfVersion\", \"WizardVersion\").Replace(\"net.r_eg.DllExport.Configurator\", \"net.r_eg.DllExport.Wizard\"))]]",
        "Command__": [
          "#[\" ",
          "    WizardVersion & ConfVersion are the same for current time",
          "\"]",
          "#[File write(\"$(pWizard)/WizardVersion.cs\"):#[$(tpl.Replace(\"ConfVersion\", \"WizardVersion\").Replace(\"net.r_eg.DllExport.Configurator\", \"net.r_eg.DllExport.Wizard\"))]]"
        ]
      }
    }
  ],
  "PostBuild": [
    {
      "Enabled": true,
      "Name": "ActBinaries",
      "Caption": "Binaries & tools ...",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": true,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[IO copy.file(\n            \"$(SolutionDir)tools/*.*\", \n            \"$(odir)/tools/\", \n            true, \n            {\"*.nuspec\"})]\n\n#[IO copy.file(\"tools/DllExport.nuspec\", \"$(odir)/DllExport.nuspec\", true)]\n\n#[IO copy.file({\n                \"$(pDllExport)/$(OutDir:$(pDllExport))/*.*\",\n                \"$(pMSBuild)/$(OutDir:$(pMSBuild))/*.*\",\n                \"$(pNSBin)/$(OutDir:$(pNSBin))/*.*\",\n                \"$(pWizard)/$(OutDir:$(pWizard))/*.*\",\n                \"$(pConf)/$(OutDir:$(pConf))/*.*\"\n               }, \n               \"$(odir)/tools/\", true)]\n\n#[\" https://github.com/3F/DllExport/issues/36 \"]\n#[IO copy.directory(\"\", \"$(odir)/lib/net20/\", true)]\n#[IO write(\"$(odir)/lib/net20/_._\"):]\n\n#[IO copy.file(\"$(pMeta)/$(OutDir:$(pMeta))/*.dll\", \n               \"$(odir)/tools/raw/lib/net20/\", true)]\n               \n#[IO copy.file(\"tools/build.targets\", \"$(odir)/build/net20/DllExport.targets\", true)]\n\n#[IO copy.file({ \"Readme.md\", \"3rd-party.txt\", \"changelog.txt\" }, \"$(odir)/\", true)]\n#[IO copy.file(\"LICENSE\", \"$(odir)/License.txt\", true)]\n\n#[var buildInfo =  $([System.String]::Concat(\"  \"))\n    S_NUM:              #[$(pVer)]\n    \n    S_REV:              #[$(revBuild)]\n    \n    S_NUM_REV:          #[$(pVer)].#[$(revBuild)]\n    \n    S_REL:              #[$(pReleaseVersion)]\n    \n    bSha1:              #[$(bSha1)]\n    \n    bName:              #[$(bName)]\n    \n    bRevc:              #[$(bRevc)]\n    \n    Metadata .NET:      #[$(TargetFrameworkVersion:$(pMeta))]\n    \n    Wizard .NET:        #[$(TargetFrameworkVersion:$(pWizard))]\n    \n    Configurator .NET:  #[$(TargetFrameworkVersion:$(pConf))]\n    \n    Configuration:      #[$(Configuration)]\n    \n    Platform:           #[$(Platform)]\n    \n    cfgname:            #[$(cfgname)]\n    \n    revDeltaBase:       #[$(revDeltaBase)]\n    \n    revDeltaMin:        #[$(revDeltaMin)]\n    \n    revDeltaMax:        #[$(revDeltaMax)]\n    \n    \n                    :: generated by a vsSolutionBuildEvent v#[$(vsSolutionBuildEvent)]\n]\n\n#[IO writeLine(\"$(odir)/build_info.txt\"):#[var buildInfo]]",
        "Command__": [
          "#[IO copy.file(",
          "            \"$(SolutionDir)tools/*.*\", ",
          "            \"$(odir)/tools/\", ",
          "            true, ",
          "            {\"*.nuspec\"})]",
          "",
          "#[IO copy.file(\"tools/DllExport.nuspec\", \"$(odir)/DllExport.nuspec\", true)]",
          "",
          "#[IO copy.file({",
          "                \"$(pDllExport)/$(OutDir:$(pDllExport))/*.*\",",
          "                \"$(pMSBuild)/$(OutDir:$(pMSBuild))/*.*\",",
          "                \"$(pNSBin)/$(OutDir:$(pNSBin))/*.*\",",
          "                \"$(pWizard)/$(OutDir:$(pWizard))/*.*\",",
          "                \"$(pConf)/$(OutDir:$(pConf))/*.*\"",
          "               }, ",
          "               \"$(odir)/tools/\", true)]",
          "",
          "#[\" https://github.com/3F/DllExport/issues/36 \"]",
          "#[IO copy.directory(\"\", \"$(odir)/lib/net20/\", true)]",
          "#[IO write(\"$(odir)/lib/net20/_._\"):]",
          "",
          "#[IO copy.file(\"$(pMeta)/$(OutDir:$(pMeta))/*.dll\", ",
          "               \"$(odir)/tools/raw/lib/net20/\", true)]",
          "               ",
          "#[IO copy.file(\"tools/build.targets\", \"$(odir)/build/net20/DllExport.targets\", true)]",
          "",
          "#[IO copy.file({ \"Readme.md\", \"3rd-party.txt\", \"changelog.txt\" }, \"$(odir)/\", true)]",
          "#[IO copy.file(\"LICENSE\", \"$(odir)/License.txt\", true)]",
          "",
          "#[var buildInfo =  $([System.String]::Concat(\"  \"))",
          "    S_NUM:              #[$(pVer)]",
          "    ",
          "    S_REV:              #[$(revBuild)]",
          "    ",
          "    S_NUM_REV:          #[$(pVer)].#[$(revBuild)]",
          "    ",
          "    S_REL:              #[$(pReleaseVersion)]",
          "    ",
          "    bSha1:              #[$(bSha1)]",
          "    ",
          "    bName:              #[$(bName)]",
          "    ",
          "    bRevc:              #[$(bRevc)]",
          "    ",
          "    Metadata .NET:      #[$(TargetFrameworkVersion:$(pMeta))]",
          "    ",
          "    Wizard .NET:        #[$(TargetFrameworkVersion:$(pWizard))]",
          "    ",
          "    Configurator .NET:  #[$(TargetFrameworkVersion:$(pConf))]",
          "    ",
          "    Configuration:      #[$(Configuration)]",
          "    ",
          "    Platform:           #[$(Platform)]",
          "    ",
          "    cfgname:            #[$(cfgname)]",
          "    ",
          "    revDeltaBase:       #[$(revDeltaBase)]",
          "    ",
          "    revDeltaMin:        #[$(revDeltaMin)]",
          "    ",
          "    revDeltaMax:        #[$(revDeltaMax)]",
          "    ",
          "    ",
          "                    :: generated by a vsSolutionBuildEvent v#[$(vsSolutionBuildEvent)]",
          "]",
          "",
          "#[IO writeLine(\"$(odir)/build_info.txt\"):#[var buildInfo]]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActILAsm",
      "Caption": "Provide our ILAsm & ILDasm",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": true,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[( #[IO exists.directory(\"packages/ILAsm/bin\")] )\n{ \n    #[File scall(\"packages_restore.cmd\", \"\", 400)]\n}\nelse{\n    #[File call(\"packages_restore.cmd\", \"\", 2000)]\n}]\n\n#[IO copy.file({\n                \"packages/ILAsm/bin/Win.x86/*.dll\",\n                \"packages/ILAsm/bin/Win.x86/*.exe\",\n                \"packages/ILAsm/*.txt\",\n                \"packages/ILAsm/*.md\"\n               }, \n               \"$(odir)/tools/coreclr/\", true)]",
        "Command__": [
          "#[( #[IO exists.directory(\"packages/ILAsm/bin\")] )",
          "{ ",
          "    #[File scall(\"packages_restore.cmd\", \"\", 400)]",
          "}",
          "else{",
          "    #[File call(\"packages_restore.cmd\", \"\", 2000)]",
          "}]",
          "",
          "#[IO copy.file({",
          "                \"packages/ILAsm/bin/Win.x86/*.dll\",",
          "                \"packages/ILAsm/bin/Win.x86/*.exe\",",
          "                \"packages/ILAsm/*.txt\",",
          "                \"packages/ILAsm/*.md\"",
          "               }, ",
          "               \"$(odir)/tools/coreclr/\", true)]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "WizardInst",
      "Caption": "Preparing installer for Wizard project ...",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": true,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": false,
        "TimeLimit": 400
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[IO writeLine(STDOUT): Build GetNuTool ...]\n#[IO writeLine(STDOUT): #[IO cmd(\"cd GetNuTool & call build PublicRelease\", 400)]]\n\n#[var frontend = $(pWizard)\\\\installer.bat]\n#[var gntECore = \"$(pGetNuTool)\\\\bin\\\\Release\\\\raw\\\\versions\\\\01. executable\\\\gnt.bat\"]\n#[var dxpWZ = $(dbin.Replace('/', '\\\\'))DllExport.bat]\n\n#[try\n{\n    #[IO writeLine(STDOUT):\n        #[IO cmd(\"copy /Y/B $(frontend)+$(gntECore) $(dxpWZ)\")]\n     ]\n}\ncatch(err, msg)\n{\n    #[IO write(STDOUT):\n        Trying with another method... ]\n    \n    #[IO cmd(\"type $(frontend)>$(dxpWZ)\")]\n    #[IO cmd(\"type $(gntECore)>>$(dxpWZ)\")]\n    \n    #[IO writeLine(STDOUT): ok]\n\n}]\n\n\n#[\" \n    finalization\n\"]\n#[IO replace.Regex(\"$(dxpWZ)\", \"(@echo off) & echo.*?exit /B \\d+\", \"$1\")]\n\n\n#[\" \n    update version\n\"]\n#[IO replace(\"$(dxpWZ)\", \"$-version-$\", \"$(dxpPrintVersion)\")]\n#[IO replace(\"$(dxpWZ)\", \"$-pkg-version-$\", \"$(pVerRel)\")]\n\n#[\" \n    .compressor\n\"]\n#[IO writeLine(STDOUT): Generate minified version of Wizard installer ...]\n#[IO writeLine(STDOUT): #[IO cmd(\"$(SolutionDir)tools\\hMSBuild $(SolutionDir)$(pWizard)/.compressor /p:core=\\\"$(SolutionDir)$(dxpWZ)\\\" /p:output=\\\"$(SolutionDir)$(dxpWZ)_minified.bat\\\" /nologo /v:m /m:4 \", 400)]]\n\n#[IO copy.file(\"$(dxpWZ)\", \"$(dxpWZ)_full.bat\", true)]\n#[IO copy.file(\"$(dxpWZ)_minified.bat\", \"$(dxpWZ)\", true)]\n#[IO delete.files({\"$(dxpWZ)_minified.bat\"})]\n\n#[IO copy.file(\"$(dxpWZ)\", \"$(odir)/\", true)]\n",
        "Command__": [
          "#[IO writeLine(STDOUT): Build GetNuTool ...]",
          "#[IO writeLine(STDOUT): #[IO cmd(\"cd GetNuTool & call build PublicRelease\", 400)]]",
          "",
          "#[var frontend = $(pWizard)\\\\installer.bat]",
          "#[var gntECore = \"$(pGetNuTool)\\\\bin\\\\Release\\\\raw\\\\versions\\\\01. executable\\\\gnt.bat\"]",
          "#[var dxpWZ = $(dbin.Replace('/', '\\\\'))DllExport.bat]",
          "",
          "#[try",
          "{",
          "    #[IO writeLine(STDOUT):",
          "        #[IO cmd(\"copy /Y/B $(frontend)+$(gntECore) $(dxpWZ)\")]",
          "     ]",
          "}",
          "catch(err, msg)",
          "{",
          "    #[IO write(STDOUT):",
          "        Trying with another method... ]",
          "    ",
          "    #[IO cmd(\"type $(frontend)>$(dxpWZ)\")]",
          "    #[IO cmd(\"type $(gntECore)>>$(dxpWZ)\")]",
          "    ",
          "    #[IO writeLine(STDOUT): ok]",
          "",
          "}]",
          "",
          "",
          "#[\" ",
          "    finalization",
          "\"]",
          "#[IO replace.Regex(\"$(dxpWZ)\", \"(@echo off) & echo.*?exit /B \\d+\", \"$1\")]",
          "",
          "",
          "#[\" ",
          "    update version",
          "\"]",
          "#[IO replace(\"$(dxpWZ)\", \"$-version-$\", \"$(dxpPrintVersion)\")]",
          "#[IO replace(\"$(dxpWZ)\", \"$-pkg-version-$\", \"$(pVerRel)\")]",
          "",
          "#[\" ",
          "    .compressor",
          "\"]",
          "#[IO writeLine(STDOUT): Generate minified version of Wizard installer ...]",
          "#[IO writeLine(STDOUT): #[IO cmd(\"$(SolutionDir)tools\\hMSBuild $(SolutionDir)$(pWizard)/.compressor /p:core=\\\"$(SolutionDir)$(dxpWZ)\\\" /p:output=\\\"$(SolutionDir)$(dxpWZ)_minified.bat\\\" /nologo /v:m /m:4 \", 400)]]",
          "",
          "#[IO copy.file(\"$(dxpWZ)\", \"$(dxpWZ)_full.bat\", true)]",
          "#[IO copy.file(\"$(dxpWZ)_minified.bat\", \"$(dxpWZ)\", true)]",
          "#[IO delete.files({\"$(dxpWZ)_minified.bat\"})]",
          "",
          "#[IO copy.file(\"$(dxpWZ)\", \"$(odir)/\", true)]",
          ""
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActPack",
      "Caption": "Packing with GetNuTool ...",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": true,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[IO replace(\"$(odir)/DllExport.nuspec\", \"{build_info}\", \"$(buildInfo)\")]\n\n#[\" v1.5 and 1.6 contains bug if used 1.2.3-alpha, 1.2.3-beta-2, 1.2.3-rc ... \"] \n##[NuGet gnt.raw(\"/t:pack /p:ngin=\\\"$(odir)\\\" /p:ngout=\\\"$(dbin)\\\"\")] \n#[IO cmd(\"tools\\\\gnt.bat /t:pack /p:ngin=\\\"$(SolutionDir)$(odir)\\\" /p:ngout=\\\"$(SolutionDir)$(dbin)\\\"\", 400)]\n\n\n#[($(revBuild) == \"\" || $(revBuild) ~= \"*\") {\n    #[$(zipname = \"DllExport_v$(pVer).zip\")]\n}\nelse {\n    #[$(zipname = \"DllExport_v$(pVer).$(revBuild)_$(bSha1).zip\")]\n}]\n\n#[7z pack.files({ \n        \"$(odir)\\\\lib\\\\net20\\\\*.*\",\n        \"$(odir)\\\\tools\\\\*.*\",\n        \"$(odir)\\\\tools\\\\coreclr\\\\*.*\",\n        \"$(odir)\\\\tools\\\\raw\\\\lib\\\\net20\\\\*.*\",\n        \"$(odir)\\\\*.*\"\n    }, \n    \"$(dbin)\\\\$(zipname)\", \n    { \"$(odir)\\\\*.nuspec\" })]",
        "Command__": [
          "#[IO replace(\"$(odir)/DllExport.nuspec\", \"{build_info}\", \"$(buildInfo)\")]",
          "",
          "#[\" v1.5 and 1.6 contains bug if used 1.2.3-alpha, 1.2.3-beta-2, 1.2.3-rc ... \"] ",
          "##[NuGet gnt.raw(\"/t:pack /p:ngin=\\\"$(odir)\\\" /p:ngout=\\\"$(dbin)\\\"\")] ",
          "#[IO cmd(\"tools\\\\gnt.bat /t:pack /p:ngin=\\\"$(SolutionDir)$(odir)\\\" /p:ngout=\\\"$(SolutionDir)$(dbin)\\\"\", 400)]",
          "",
          "",
          "#[($(revBuild) == \"\" || $(revBuild) ~= \"*\") {",
          "    #[$(zipname = \"DllExport_v$(pVer).zip\")]",
          "}",
          "else {",
          "    #[$(zipname = \"DllExport_v$(pVer).$(revBuild)_$(bSha1).zip\")]",
          "}]",
          "",
          "#[7z pack.files({ ",
          "        \"$(odir)\\\\lib\\\\net20\\\\*.*\",",
          "        \"$(odir)\\\\tools\\\\*.*\",",
          "        \"$(odir)\\\\tools\\\\coreclr\\\\*.*\",",
          "        \"$(odir)\\\\tools\\\\raw\\\\lib\\\\net20\\\\*.*\",",
          "        \"$(odir)\\\\*.*\"",
          "    }, ",
          "    \"$(dbin)\\\\$(zipname)\", ",
          "    { \"$(odir)\\\\*.nuspec\" })]"
        ]
      }
    }
  ],
  "CancelBuild": [],
  "WarningsBuild": [],
  "ErrorsBuild": [],
  "OWPBuild": [],
  "Transmitter": [],
  "CommandEvent": [],
  "Logging": [],
  "SlnOpened": [
    {
      "Enabled": true,
      "Name": "ActDefConst",
      "Caption": "define dynamic constants",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": false,
      "BuildType": "BeforeAndAfter",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "$(defConstList = \"CONFVER_EXISTS\")\n$(+DefConstDynamic = $(defConstList):Configurator)",
        "Command__": [
          "$(defConstList = \"CONFVER_EXISTS\")",
          "$(+DefConstDynamic = $(defConstList):Configurator)"
        ]
      }
    }
  ],
  "SlnClosed": []
}