{
  "Header": {
    "_": [
      " This file for vsSolutionBuildEvent ",
      " https://github.com/3F/vsSolutionBuildEvent "
    ],
    "Compatibility": "0.12.4"
  },
  "PreBuild": [
    {
      "Enabled": true,
      "Name": "ActDir",
      "Caption": "Prepare output directory",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[($(Configuration) == \"PublicRelease\") {",
          "    #[$(cfgname = 'Release')]",
          "}",
          "else{",
          "    #[$(cfgname = $(Configuration))]",
          "}]",
          "",
          "#[$(dbin = \"bin/$(cfgname)/\")]",
          "",
          "$(revDeltaBase  = \"2016/10/12\")",
          "$(revDeltaMin   = $([System.Math]::Pow(10, 3)))",
          "$$(revDeltaMax   = $([System.Math]::Pow(10, 5)))",
          "$(revDeltaMax   = 65534) #[\" limit of AssemblyVersion (2^16 - 2) - i.e. 65534 max allowed \"]",
          "",
          "$(pDllExport    = \"RGiesecke.DllExport\")",
          "$(pMeta         = \"MetadataFx\")",
          "$(pMetaCore     = \"MetadataCore\")",
          "$(pNSBin        = \"NSBin\")",
          "$(pMvsSln       = \"MvsSln\")",
          "$(pWizard       = \"Wizard\")",
          "$(pManager      = \"Manager\")",
          "$(pPeViewer     = \"PeViewer\")",
          "$(pGetNuTool    = \"GetNuTool\")",
          "$(phMSBuild     = \"hMSBuild\")",
          "$(pMSBuild      = \"RGiesecke.DllExport.MSBuild\")",
          "$(odir          = \"$(dbin)raw/\")",
          "",
          "#[IO delete.directory(\"$(dbin)\", true)]",
          "#[IO copy.directory(\"\", \"$(dbin)\", true)]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActSubmodules",
      "Caption": "submodules and packages",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[( !(#[IO exists.file(\"$(pGetNuTool)/gnt.sln\")]) )",
          "{",
          "    #[File call(\"git\", \"submodule update --init --recursive GetNuTool\", 1000)]",
          "}]",
          "",
          "#[( !(#[IO exists.file(\"$(pMvsSln)/MvsSln.sln\")]) )",
          "{",
          "    #[File call(\"git\", \"submodule update --init --recursive MvsSln\", 1000)]",
          "}]",
          "",
          "#[( !(#[IO exists.file(\"$(phMSBuild)/hMSBuild.sln\")]) )",
          "{",
          "    #[File call(\"git\", \"submodule update --init --recursive hMSBuild\", 1000)]",
          "}]",
          "",
          "TODO: option for expensive coreclr",
          "",
          "",
          "#[\" Packages \"]",
          "",
          "#[( !(#[IO exists.file(\"packages/__checked\")]) )",
          "{",
          "    #[File call(\"tools\\hmsbuild.bat\", \"-t:restore /v:q /nologo /p:Configuration=$(Configuration) /p:Platform=\\\"Any CPU\\\"\", 1000)]",
          "        ",
          "    #[NuGet gnt.raw(\"/p:ngconfig=\\\"packages.config;PeViewer/packages.config;NSBin/packages.config;Wizard/packages.config\\\" /nologo /v:m /m:4\")]",
          "    ",
          "    #[IO copy.directory(\"\", \"packages/\", true)]",
          "    #[File write(\"packages/__checked\"): ]",
          "}]"
        ]
      }
    },
    {
      "Enabled": false,
      "Name": "CBuild",
      "Caption": "Custom build for dependencies ...",
      "SupportMSBuild": false,
      "SupportSBEScripts": false,
      "ToConfiguration": [
        "PublicRelease|Any CPU"
      ],
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 300
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeFile, vsSolutionBuildEvent",
        "Type": "File",
        "Command__": [
          "cd MvsSln & build PublicRelease"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActUpdVersions",
      "Caption": "Update version number",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[var pVer = #[File get(\".version\")]]",
          "#[$(dxpPrintVersion = \"v$(pVer)\")]",
          "",
          "#[IO replace.Regex(\"$(pMetaCore)/$(pMetaCore).csproj\", \"<Version>.+?</Version>\", \"<Version>$(pVer)</Version>\")]",
          "",
          "#[var pReleaseVersion   = #[File get(\".release.version\")]]",
          "#[$(pReleaseVersion     = $(pReleaseVersion.Trim()))]",
          "",
          "#[( $(pReleaseVersion) == \"\" ) {",
          "    #[$(partRelV = \"\")]",
          "    #[$(pVerRel  = \"$(pVer)\")]",
          "} else {",
          "    #[$(partRelV = \"-$(pReleaseVersion)\")]",
          "    #[$(pVerRel  = \"$(pVer)-$(pReleaseVersion)\")]",
          "}]",
          "",
          "#[( $(Configuration) != \"PublicRelease\" )",
          "{",
          "    #[IO replace.Regex(\"DllExportVersion.cs\", \"(\\sS_NUM\\s=).+?\\\";\", \"$1 \\\"$(pVer)\\\";\")]",
          "    #[IO replace.Regex(\"DllExportVersion.cs\", \"(\\sS_REL\\s=).+?\\\";\", \"$1 \\\"$(pReleaseVersion)\\\";\")]",
          "}]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActWizardVersion",
      "Caption": "Update WizardVersion",
      "ToConfiguration": [
        "PublicRelease|Any CPU"
      ],
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[var tpl = // This code was generated by a vsSolutionBuildEvent. ",
          "// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.",
          "namespace net.r_eg.DllExport",
          "{",
          "    using System;",
          "",
          "    internal struct DllExportVersion",
          "    {",
          "        public const string S_NUM = \"%S_NUM%\";",
          "        public const string S_REV = \"%S_REV%\";",
          "        public const string S_REL = \"%S_REL%\";",
          "",
          "        public const string S_NUM_REV = S_NUM + \".\" + S_REV;",
          "        public const string S_PRODUCT = \"$(pVerRel)\";",
          "",
          "        public const string BRANCH_SHA1 = \"%B_SHA1%\";",
          "        public const string BRANCH_NAME = \"%B_NAME%\";",
          "        public const string BRANCH_REVC = \"%B_REVC%\";",
          "",
          "        public const string DXP = \".NET DllExport\";",
          "        public static readonly Version number = new Version(S_NUM_REV);",
          "",
          "        internal const string S_INFO        = S_NUM_REV + \"+\" + BRANCH_SHA1;",
          "        internal const string S_INFO_P      = S_PRODUCT + \"+\" + BRANCH_SHA1;",
          "        internal const string S_INFO_FULL   = S_INFO + \":\" + BRANCH_NAME + \"-\" + BRANCH_REVC;",
          "    }",
          "}]",
          "",
          "",
          "#[\" ",
          "    Calculate revision",
          "\"]",
          "#[var tBase     = $([System.DateTime]::Parse('$(revDeltaBase)').ToBinary())]",
          "#[var tNow      = $([System.DateTime]::UtcNow.Ticks)]",
          "#[var revBuild  = #[$(",
          "                    [System.TimeSpan]::FromTicks('$(",
          "                        [MSBuild]::Subtract($(tNow), $(tBase))",
          "                    )')",
          "                    .TotalMinutes.ToString('0'))]]",
          "                     ",
          "#[var revBuild  = #[$(",
          "                    [MSBuild]::Add(",
          "                        $(revDeltaMin), ",
          "                        $([MSBuild]::Modulo(",
          "                            $(revBuild), ",
          "                            $([MSBuild]::Subtract(",
          "                                $(revDeltaMax), $(revDeltaMin)",
          "                             ))",
          "                         ))",
          "                     )",
          "                   )]",
          "]",
          "",
          "#[$(dxpPrintVersion = \"v$(pVer).$(revBuild)$(partRelV)\")]",
          "",
          "#[\" ",
          "    Remove placeholders",
          "\"]",
          "#[var tpl = $(tpl.Replace(\"%S_NUM%\", \"$(pVer)\").Replace(\"%S_REV%\", \"$(revBuild)\").Replace(\"%S_REL%\", \"$(pReleaseVersion)\"))]",
          "",
          "#[\" ",
          "    Checking of the git to define sha1, branch name, etc.",
          "\"]",
          "#[var isGit = #[IO cmd(\"git rev-parse 2>&1\")]]",
          "#[( $(isGit) == \"\" )",
          "{",
          "    #[var bSha1 = #[IO sout(\"git\", \"rev-parse --short HEAD\")]]",
          "    #[var bName = #[IO sout(\"git\", \"rev-parse --abbrev-ref HEAD\")]]",
          "    #[var bRevc = #[IO sout(\"git\", \"rev-list HEAD --count\")]]",
          "    ",
          "    #[($(bName) == \"HEAD\") {",
          "        #[var bName = $(APPVEYOR_REPO_BRANCH)]",
          "    }]",
          "    ",
          "    #[$(dxpPrintVersion = \"$(dxpPrintVersion)+$(bSha1)\")]",
          "}",
          "else {",
          "    #[$(bSha1 = '-')] #[$(bName = '-')] #[$(bRevc = '-')]",
          "}]",
          "",
          "#[var tpl = #[$(tpl.Replace(\"%B_SHA1%\", \"#[var bSha1]\")",
          "                   .Replace(\"%B_NAME%\", \"#[var bName]\")",
          "                   .Replace(\"%B_REVC%\", \"#[var bRevc]\") )]]",
          "",
          "#[\" ",
          "    Save result",
          "\"]",
          "#[File write(\"DllExportVersion.cs\"):#[var tpl]]"
        ]
      }
    }
  ],
  "PostBuild": [
    {
      "Enabled": true,
      "Name": "ActBinaries",
      "Caption": "Binaries & tools ...",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[IO copy.file(",
          "            \"$(SolutionDir)tools/*.*\", ",
          "            \"$(odir)/tools/\", ",
          "            true, ",
          "            {\"*.nuspec\"})]",
          "",
          "#[IO copy.file(\"tools/DllExport.nuspec\", \"$(odir)/DllExport.nuspec\", true)]",
          "#[IO replace(\"$(odir)/DllExport.nuspec\", \"$-version-$\", \"$(pVerRel)\")]",
          "",
          "#[IO copy.file({",
          "                \"$(pDllExport)/$(OutDir:$(pDllExport))/*.*\",",
          "                \"$(pMSBuild)/$(OutDir:$(pMSBuild))/*.*\",",
          "                \"$(pNSBin)/$(OutDir:$(pNSBin))/*.*\",",
          "                \"$(pWizard)/$(OutDir:$(pWizard))/*.*\",",
          "                \"$(pPeViewer)/$(OutDir:$(pPeViewer))/*.*\"",
          "               }, ",
          "               \"$(odir)/tools/\", true)]",
          "",
          "#[\" https://github.com/3F/DllExport/issues/36 \"]",
          "#[IO copy.directory(\"\", \"$(odir)/lib/net20/\", true)]",
          "#[IO write(\"$(odir)/lib/net20/_._\"):]",
          "",
          "#[$(metaCoreTargetVer = $(TargetFramework:$(pMetaCore)))]",
          "",
          "#[IO copy.directory(\"\", \"$(odir)/lib/$(metaCoreTargetVer)/\", true)]",
          "#[IO write(\"$(odir)/lib/$(metaCoreTargetVer)/_._\"):]",
          "",
          "",
          "#[IO copy.file(\"$(pMeta)/$(OutDir:$(pMeta))/*.dll\", \"$(odir)/tools/raw/lib/net20/\", true)]",
          "#[IO copy.file(\"$(pMetaCore)/$(OutputPath:$(pMetaCore))*.dll\", \"$(odir)/tools/raw/lib/netstd/\", true)]",
          "",
          "##[IO copy.file(\"tools/build.targets\", \"$(odir)/build/net/DllExport.targets\", true)]",
          "",
          "#[IO copy.file({",
          "    \"Readme.md\",",
          "    \"3rd-party-NOTICES.txt\",",
          "    \"changelog.txt\",",
          "    \"LICENSE.txt\",",
          "    \"AUTHORS.txt\",",
          "    \".gitattributes\"",
          "},",
          "\"$(odir)/\", true)]",
          "",
          "#[var buildInfo =  $([System.String]::Concat(\"  \"))",
          "    S_NUM_REV:          #[$(pVer)].#[$(revBuild)]",
          "    ",
          "    S_REL:              #[$(pReleaseVersion)]",
          "    ",
          "    bSha1:              #[$(bSha1)]",
          "    ",
          "    MetaCor:            #[$(TargetFramework:$(pMetaCore))]",
          "    ",
          "    MetaLib:            #[$(TargetFrameworkVersion:$(pMeta))]",
          "    ",
          "    Wizard:             #[$(TargetFrameworkVersion:$(pWizard))]",
          "    ",
          "    Configuration:      #[$(Configuration)]",
          "    ",
          "    :: generated by a vsSolutionBuildEvent #[$(vsSolutionBuildEvent)]",
          "]",
          "",
          "#[IO writeLine(\"$(odir)/build_info.txt\"):#[var buildInfo]]",
          "",
          "",
          "#[IO replace(\"$(odir)/DllExport.nuspec\", \"{build_info}\", \"$(buildInfo)\")]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "XmlMetadata",
      "Caption": "Prepare XML metadata of the library",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[$(IDNS = 'D3F00FF1770DED978EC774BA389F2DC9')]",
          "",
          "#[IO copy.file(\"$(pMeta)/$(OutDir:$(pMeta))/DllExport.xml\", ",
          "               \"$(odir)/tools/raw/lib/net20/\", true)]",
          "",
          "#[IO replace.Regex(\"$(odir)/tools/raw/lib/net20/DllExport.xml\", \"$(IDNS).*F00+\", \"$(IDNS)\")]",
          "",
          "",
          "#[IO copy.file(\"$(pMetaCore)/$(DocumentationFile:$(pMetaCore))\", ",
          "               \"$(odir)/tools/raw/lib/netstd/\", true)]",
          "",
          "#[IO replace.Regex(\"$(odir)/tools/raw/lib/netstd/DllExport.xml\", \"$(IDNS).*F00+\", \"$(IDNS)\")]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActILAsm",
      "Caption": "Provide our ILAsm & ILDasm",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[IO copy.file({",
          "                \"packages/ILAsm/bin/Win.x86/*.dll\",",
          "                \"packages/ILAsm/bin/Win.x86/*.exe\",",
          "                \"packages/ILAsm/*.txt\",",
          "                \"packages/ILAsm/*.md\"",
          "               }, ",
          "               \"$(odir)/tools/coreclr/\", true)]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "WizardInst",
      "Caption": "Preparing Managers ...",
      "IgnoreIfBuildFailed": true,
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": false,
        "TimeLimit": 400
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[IO writeLine(STDOUT): Build GetNuTool ...]",
          "#[NuGet gnt.raw(\"/p:ngpackages=vsSolutionBuildEvent /p:wpath=GetNuTool\")] temp fix for older version",
          "#[IO writeLine(STDOUT): #[IO cmd(\"cd GetNuTool & call build PublicRelease\", 400)]]",
          "",
          "#[var frontend = $(pManager)\\\\batch\\\\Manager.bat]",
          "#[var gntECore = \"$(pGetNuTool)\\\\bin\\\\Release\\\\raw\\\\executables\\\\batch\\\\gnt.bat\"]",
          "#[var dxpWZ = $(dbin.Replace('/', '\\\\'))DllExport.bat]",
          "",
          "#[try",
          "{",
          "    #[IO writeLine(STDOUT):",
          "        #[IO cmd(\"copy /Y/B $(frontend)+$(gntECore) $(dxpWZ)\")]",
          "     ]",
          "}",
          "catch(err, msg)",
          "{",
          "    #[IO write(STDOUT):",
          "        Trying with another method... ]",
          "    ",
          "    #[IO cmd(\"type $(frontend)>$(dxpWZ)\")]",
          "    #[IO cmd(\"type $(gntECore)>>$(dxpWZ)\")]",
          "    ",
          "    #[IO writeLine(STDOUT): ok]",
          "",
          "}]",
          "",
          "",
          "#[\" ",
          "    finalization",
          "\"]",
          "#[IO replace.Regex(\"$(dxpWZ)\", \"(@echo off) & echo.*?exit /B \\d+\", \"$1\")]",
          "",
          "",
          "#[\" ",
          "    update version",
          "\"]",
          "#[IO replace(\"$(dxpWZ)\", \"$-pkg-version-$\", \"$(pVerRel)\")]",
          "#[( $(Configuration) != \"PublicRelease\" )",
          "{",
          "    #[$(wzPrintVer = \"$(pVer)$(partRelV)\")]",
          "    #[( $(Configuration) ~= \"Debug\" )",
          "    {",
          "        #[$(wzPrintVer += \" [ Debug ]\")]",
          "    }]    ",
          "    #[IO replace(\"$(dxpWZ)\", \"$-version-$\", \"$(wzPrintVer)\")]",
          "}",
          "else",
          "{",
          "    #[IO replace(\"$(dxpWZ)\", \"$-version-$\", \"$(dxpPrintVersion)\")]",
          "}]",
          "",
          "#[\" ",
          "    .compressor",
          "\"]",
          "#[IO writeLine(STDOUT): Generate minified version of the Wizard's manager ...]",
          "#[$(mbatch = \"$(SolutionDir)$(pManager)/batch/\")]",
          "#[IO writeLine(STDOUT): #[IO cmd(\"$(SolutionDir)tools\\hMSBuild $(mbatch).compressor /p:core=\\\"$(SolutionDir)$(dxpWZ)\\\" /p:output=\\\"$(SolutionDir)$(dxpWZ)_minified.bat\\\" /p:maptpl=\\\"$(mbatch)map.tpl.targets\\\" /nologo /v:m /m:4 \", 400)]]",
          "",
          "##[IO copy.file(\"$(dxpWZ)\", \"$(dxpWZ).full.bat\", true)]",
          "#[IO copy.file(\"$(dxpWZ)_minified.bat\", \"$(dxpWZ)\", true)]",
          "#[IO delete.files({\"$(dxpWZ)_minified.bat\"})]",
          "",
          "#[IO copy.file(\"$(dxpWZ)\", \"$(odir)/\", true)]",
          "",
          "",
          "#[\" ",
          "    quick commands",
          "\"]",
          "",
          "##[IO write(\"$(dbin)/DllExport_Configure.bat\"): DllExport -action Configure %*]",
          ""
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "MgrTests",
      "Caption": "Preparing tests for manager ...",
      "IgnoreIfBuildFailed": true,
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": false,
        "TimeLimit": 400
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "",
          "#[$(mgrTests = \"$(dbin)/tests/mgr/\")]",
          "",
          "#[IO copy.file(",
          "            {",
          "                \"$(dbin)*.bat\",",
          "                \"$(dbin)*.map\",",
          "                \"$(dbin)*.targets\"",
          "            }, ",
          "            \"$(mgrTests)/\", ",
          "            true",
          ")]",
          "",
          "",
          "#[IO copy.file(",
          "            {",
          "                \"$(mbatch)tests.bat\",",
          "                \"$(mbatch)tests.targets\"",
          "            }, ",
          "            \"$(mgrTests)/\", ",
          "            true",
          ")]",
          "",
          "#[File replace(\"$(mgrTests)tests.bat\", \"$version$\", \"$(pVerRel)\")]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "hMSBuild",
      "Caption": "Build hMSBuild ...",
      "IgnoreIfBuildFailed": true,
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 400
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeInterpreter, vsSolutionBuildEvent",
        "Type": "Interpreter",
        "Handler": "cmd.exe /C",
        "Newline": "&",
        "Wrapper": "",
        "Command__": [
          "echo Build hMSBuild ... ",
          "echo. ",
          "echo. $(hMSBuildRawDir = \"$(SolutionDir)\\\\$(phMSBuild)\\\\bin\\\\Release\\\\raw\\\\\") ",
          "echo. $(hMSBuildOutput = \"$(SolutionDir)\\\\$(odir)\\\\\")",
          "echo. ",
          "cd hMSBuild ",
          "call build ",
          "(copy /Y/B \"$(hMSBuildRawDir)hMSBuild.bat\" \"$(hMSBuildOutput)hMSBuild.bat\" || type \"$(hMSBuildRawDir)hMSBuild.bat\">\"$(hMSBuildOutput)hMSBuild.bat\")"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "OfflineVersion",
      "Caption": "Preparing Offline version ...",
      "IgnoreIfBuildFailed": true,
      "ToConfiguration": [
        "PublicRelease|Any CPU",
        "Release|Any CPU"
      ],
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": false,
        "TimeLimit": 400
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[\" ",
          "    Offline version",
          "\"]",
          "#[$(mgrOffline = \"$(pManager)\\\\batch\\\\Manager.offline.bat\")]",
          "",
          "#[IO copy.directory(\"$(odir)\", \"$(dbin)/raw.offline/packages/DllExport\", true, true)]",
          "#[IO copy.file(\"$(mgrOffline)\", \"$(dbin)/raw.offline/DllExport.bat\", true)]",
          "#[IO copy.file({ \".gitattributes\" }, \"$(dbin)/raw.offline/\", true)]",
          "##[IO write(\"$(dbin)/raw.offline/DllExport_Configure.bat\"): DllExport -action Configure %*]",
          "",
          "#[IO write(\"$(dbin)/raw.offline/Readme.txt\"): ",
          "! Please note ! this folder contains an offline version of the .NET DllExport package. ",
          "",
          "Manager is already configured for already received package inside this folder through DllExport.bat wrapper in upper level.",
          "Internet connection is not required for any use.",
          "",
          "Use the same commands to this wrapper as for the classic version, for example:",
          "",
          "```",
          "    DllExport -action Export",
          "```",
          "",
          "Please read our documentation or press:",
          "",
          "```",
          "    DllExport -help",
          "```",
          "",
          "! Don't forget to search the latest an offline version of this package with the new features and bug fixes ! ",
          "    ",
          "",
          "About manager:",
          "https://github.com/3F/DllExport/wiki/DllExport-Manager",
          "",
          "The latest releases including nightly builds:",
          "https://github.com/3F/DllExport/releases",
          "",
          "The project repo on GitHub:",
          "https://github.com/3F/DllExport",
          "",
          "",
          "]",
          "",
          ""
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActPack",
      "Caption": "Packing with GetNuTool ...",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[\" v1.5 and 1.6 contains bug if used 1.2.3-alpha, 1.2.3-beta-2, 1.2.3-rc ... \"] ",
          "##[NuGet gnt.raw(\"/t:pack /p:ngin=\\\"$(odir)\\\" /p:ngout=\\\"$(dbin)\\\"\")] ",
          "#[IO cmd(\"tools\\\\gnt.bat /t:pack /p:ngin=\\\"$(SolutionDir)$(odir)\\\" /p:ngout=\\\"$(SolutionDir)$(dbin)\\\"\", 400)]",
          "",
          "#[( $(cfgname) != \"Debug\" )",
          "{",
          "    #[($(revBuild) == \"\" || $(revBuild) ~= \"*\") {",
          "        #[$(zipname = \"DllExport.$(pVerRel).zip\")]",
          "    }",
          "    else {",
          "        #[$(zipname = \"DllExport.$(pVer).$(revBuild)$(partRelV)+$(bSha1).zip\")]",
          "    }]",
          "    ",
          "    ##[7z pack.files({ ",
          "            \"$(odir)\\\\lib\\\\net20\\\\*.*\",",
          "            \"$(odir)\\\\lib\\\\$(metaCoreTargetVer)\\\\*.*\",",
          "            \"$(odir)\\\\tools\\\\*.*\",",
          "            \"$(odir)\\\\tools\\\\coreclr\\\\*.*\",",
          "            \"$(odir)\\\\tools\\\\raw\\\\lib\\\\net20\\\\*.*\",",
          "            \"$(odir)\\\\tools\\\\raw\\\\lib\\\\netstd\\\\*.*\",",
          "            \"$(odir)\\\\*.*\"",
          "        }, ",
          "        \"$(dbin)\\\\$(zipname)\", ",
          "        { \"$(odir)\\\\*.nuspec\" })]",
          "        ",
          "    ",
          "    ",
          "    #[\" ",
          "        Offline version",
          "    \"]",
          "    ",
          "    #[7z pack.directory(",
          "        \"$(dbin)raw.offline\", ",
          "        \"$(dbin)offline.$(zipname)\",",
          "        Zip,",
          "        Deflate,",
          "        1",
          "    )]",
          "    ",
          "}]",
          ""
        ]
      }
    }
  ],
  "SlnOpened": [
    {
      "Enabled": true,
      "Name": "ActDefConst",
      "Caption": "define dynamic constants",
      "BuildType": "BeforeAndAfter",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "$(defConstList = \"CONFVER_EXISTS\")",
          "$(+DefConstDynamic = $(defConstList):Configurator)"
        ]
      }
    }
  ]
}